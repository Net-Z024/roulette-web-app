@page
@Html.AntiForgeryToken()
@model CaseBattleNew.Pages.OpenCaseModel
@{
    ViewData["Title"] = "Open Case Roulette";
}

<h2 style="text-align: center; margin-top: 20px;">Case Roulette</h2>

<div id="roulette-container">
    <div id="roulette-wheel">
        <div class="segment">Common</div>
        <div class="segment">Rare</div>
        <div class="segment">Epic</div>
        <div class="segment">Legendary</div>
    </div>
</div>

<!-- Spin Button -->
<button id="spin-button" onclick="startSpin()">Open Case</button>

<!-- Result Display -->
<div id="result-display">
    <h3>Result: <span id="result-name"></span></h3>
</div>





<script>
    async function startSpin() {
        const spinButton = document.getElementById('spin-button');
        const resultDisplay = document.getElementById('result-display');
        const resultName = document.getElementById('result-name');
        const rouletteWheel = document.getElementById('roulette-wheel');

        // Map of segment names to their corresponding colors
        const segmentColors = {
            "Common": "blue",
            "Rare": "purple",
            "Epic": "red",
            "Legendary": "gold"
        };

        spinButton.disabled = true;
        resultDisplay.style.display = "none";

        try {
            const response = await fetch('/OpenCase?handler=OpenCase', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.getElementsByName('__RequestVerificationToken')[0].value
                }
            });

            const data = await response.json();

            if (data.index === undefined || data.name === undefined) {
                throw new Error("Invalid response data.");
            }

            const segmentDegrees = 360 / 4; // 4 segments
            const spinCount = 5; // Number of full rotations
            const targetRotation = (spinCount * 360) + (data.index * segmentDegrees);

            // Apply rotation
            rouletteWheel.style.transform = `rotate(${targetRotation}deg)`;

            // Display result after animation
            setTimeout(() => {
                resultName.textContent = data.name;

                // Set the result color based on the segment's color
                resultName.style.color = segmentColors[data.name] || "#333"; // Default to dark gray if undefined

                resultDisplay.style.display = "block";
                spinButton.disabled = false;
            }, 4000); // Match animation duration
        } catch (error) {
            console.error("Error during fetch:", error);
            alert(`Error: ${error.message}`);
            spinButton.disabled = false;
        }
    }

</script>
