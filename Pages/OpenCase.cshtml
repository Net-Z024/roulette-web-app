@page
@Html.AntiForgeryToken()
@using GrpcService1
@model CaseBattleNew.Pages.OpenCaseModel
@{
    ViewData["Title"] = "Open Case Roulette";
}

<h2 style="text-align: center; margin-top: 20px;">Case Roulette</h2>




@foreach (var chest in Model.Chests)
{

    <div class="case-card"
         onmouseenter="showCaseTooltip(@chest.Id, this)"
         onmouseleave="hideCaseTooltip(this)">
       
        <div class="case-image" style="background-image: url('https://community.fastly.steamstatic.com/economy/image/-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXU5A1PIYQNqhpOSV-fRPasw8rsUFJ5KBFZv668FF8ugPDMIWpAuIq1w4KIlaChZOyFwzgJuZNy3-2T89T0jlC2rhZla2vwIJjVLFHz75yKpg/360fx360f');"></div>
        <div class="case-details">
            <h3 class="case-name">@chest.Name</h3>
            <p class="case-price">$@chest.Price</p>
            <button class="open-case-button" onclick="selectCase(@chest.Id)">Open</button>
        </div>
        <div class="case-tooltip" style="display: none;">
            <ul class="case-item-list">
            </ul>
        </div>
    </div>
}
<div id="spinSection" style="visibility:hidden">
    <button id="spin-button" onclick="startSpin()">Open Case</button>

    <div id="result-display">
        <h3>Result: <span id="result-name"></span></h3>
    </div>
    <div class="raffle-roller">
        <div class="raffle-roller-holder">
            <div class="raffle-roller-container" id="raffle-roller-container" style="margin-left: 0px;">
            </div>
        </div>
    </div>

    <center>
        <span style="font-size: 25px;">
            Your winning is <span style="color: green;" id="rolled">rolling</span>
            <br>
            <button onclick="window.location='';">reset</button>
        </span>
    </center>
    <br>
    <div class="inventory"></div>
</div>
<script>
    var caseItems = [];
    var chestId = 0;
    const itemWidth = 100; 
    const visibleItems = 5; 
    const bufferLoops = 15; 

    // Function to select a case
    async function selectCase(selectedChestId) {
        // Hide all chests
        const allChests = document.querySelectorAll('.case-card');
        allChests.forEach(chest => chest.style.display = 'none'); // Hide all chests

        // Show the spin button and hide result display
        document.getElementById('spinSection').style.visibility = 'visible';

        try {
            const response = await fetch(`/OpenCase?handler=GetChestItems&chestId=${selectedChestId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.getElementsByName('__RequestVerificationToken')[0].value
                }
            });

            if (!response.ok) {
                throw new Error("Failed to fetch items");
            }

            const data = await response.json();
            chestId = selectedChestId;
            caseItems = data.items;

            // Populate the roller right after selecting the case
            generateItemsForRoller(); // Populate items in the roller

        } catch (error) {
            console.error("Error during fetch:", error);
            alert("Error: " + error.message);
        }
    }


    // Function to start the spin
    async function startSpin() {
        const spinButton = document.getElementById('spin-button');
        spinButton.disabled = true;
        $('#rolled').html("rolling");

        try {
            // Reset animation state
            resetAnimation();
            generateItemsForRoller();

            const response = await fetch(`/OpenCase?handler=OpenCase&chestId=${chestId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.getElementsByName('__RequestVerificationToken')[0].value
                }
            });

            if (!response.ok) {
                throw new Error("Failed to fetch winner");
            }

            const data = await response.json();
            const winningIndex = data.index; // Index of the winning item
            const newBalance = data.newBalance;
            $('#balanceId').html("Balance:"+newBalance);
            // Calculate the scroll position to reveal the winner
            const totalItems = bufferLoops * caseItems.length + visibleItems;
            const finalPosition = -(itemWidth * (bufferLoops * caseItems.length + winningIndex - Math.floor(visibleItems / 2)));

            // Animate the roller to the winning item
            $('.raffle-roller-container').css({
                transition: "all 8s cubic-bezier(.08,.6,0,1)", // Smooth animation
                "margin-left": `${finalPosition}px` // Scroll to the winning item
            });

            // Wait for the animation to complete and show the winner
            setTimeout(() => {
                const winningItem = caseItems[winningIndex - 1];
                $('#rolled').html(winningItem.name); // Display winner's name
                const winElement = `<div class='item' style='background-image: url("${winningItem.imageUrl}");'></div>`;
                $(winElement).appendTo('.inventory');
                spinButton.disabled = false;
            }, 8500); // Wait for animation to complete

        } catch (error) {
            console.error("Error during fetch:", error);
            alert("Error: " + error.message);
            spinButton.disabled = false;
        }
    }

    // Function to generate more items for the roller
    function generateItemsForRoller() {
    

        // Duplicate the items to create a long spin effect
        for (let i = 0; i < bufferLoops; i++) {
            for (let j = 0; j < caseItems.length; j++) {
                const rand = getRandomInt(caseItems.length);
                const item = caseItems[rand];
                const element = `<div class="item" style="background-image: url(${item.imageUrl}); width: ${itemWidth}px;"></div>`;
                $(element).appendTo('.raffle-roller-container');
            }
        }

        // Add final set of items to complete the visible area
        for (let i = 0; i < visibleItems; i++) {
            const item = caseItems[i % caseItems.length];
            const element = `<div class="item" style="background-image: url(${item.imageUrl}); width: ${itemWidth}px;"></div>`;
            $(element).appendTo('.raffle-roller-container');
        }
    }

    // Function to reset the animation
    function resetAnimation() {
        $('.raffle-roller-container').css({
            transition: "none", // Disable transition to reset instantly
            "margin-left": "0px" // Reset position
        });
    }

    // Function to generate a random number
    function getRandomInt(max) {
        return Math.floor(Math.random() * max);
    }
    // Function to show tooltip with items
    async function showCaseTooltip(chestId, caseCard) {
        const tooltip = caseCard.querySelector('.case-tooltip');
        const itemList = tooltip.querySelector('.case-item-list');

        // Clear existing items
        itemList.innerHTML = '';

        try {
            const response = await fetch(`/OpenCase?handler=GetChestItems&chestId=${chestId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.getElementsByName('__RequestVerificationToken')[0].value
                }
            });

            if (!response.ok) {
                throw new Error('Failed to fetch chest items');
            }

            const data = await response.json();
            console.log("Fetched items:", data.items);

            data.items.forEach(item => {
                const listItem = document.createElement('li');
                listItem.classList.add('tooltip-item');

                // Add image
                const itemImage = document.createElement('img');
                itemImage.src = item.imageUrl; // Assuming item.imageUrl contains the image URL
                itemImage.alt = item.name;
                itemImage.classList.add('item-image');

                // Add name
                const itemName = document.createElement('span');
                itemName.textContent = item.name;
                itemName.classList.add('item-name');

                // Add price
                const itemPrice = document.createElement('span');
                itemPrice.textContent = `$${item.value}`; // Assuming item.price contains the price
                itemPrice.classList.add('case-price');

                // Append all to the list item
                listItem.appendChild(itemImage);
                listItem.appendChild(itemName);
                listItem.appendChild(itemPrice);

                // Append the list item to the tooltip list
                itemList.appendChild(listItem);
            });

            // Show the tooltip
            tooltip.style.display = 'block';
        } catch (error) {
            console.error('Error fetching chest items:', error);
        }
    }


    // Function to hide tooltip
    function hideCaseTooltip(caseCard) {
        const tooltip = caseCard.querySelector('.case-tooltip');
        tooltip.style.display = 'none';
    }

</script>
