@page
@Html.AntiForgeryToken()
@using GrpcService1
@model CaseBattleNew.Pages.OpenCaseModel
@{
    ViewData["Title"] = "Open Case Roulette";
}

<h2 style="text-align: center; margin-top: 20px;">Case Roulette</h2>

<!-- Spin Button -->
<button id="spin-button" onclick="startSpin()">Open Case</button>

<!-- Result Display -->
<div id="result-display">
    <h3>Result: <span id="result-name"></span></h3>
</div>

<div class="raffle-roller">
    <div class="raffle-roller-holder">
        <div class="raffle-roller-container" style="margin-left: 0px;">
            @foreach (var item in (Model.Chests.FirstOrDefault()?.PossibleItems ?? Enumerable.Empty<ChestItemDto>()).ToList())
            {
                <div class="item class_red_item"
                     style="background-image:url('@item.Item.ImageUrl');">
                    @item.Item.Name
                </div>
            }
        </div>
    </div>
</div>

<center>
    <span style="font-size: 25px;">
        Your winning is <span style="color: green;" id="rolled">rolling</span>
        <br>
        <button onclick="window.location='';">reset</button>
    </span>
</center>
<br>
<div class="inventory"></div>

<script>
    // Serialize the CaseItems object to JavaScript
    // Serialize the CaseItems object to JavaScript
    var caseItems = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Chests.FirstOrDefault()?.PossibleItems ?? Enumerable.Empty<ChestItemDto>()).ToList());
    const itemWidth = 100; // Width of each item (in px, match your CSS)
    const visibleItems = 5; // Number of items visible in the roller at once
    const bufferLoops = 15; // Number of loops to simulate a long spin

    // This function handles starting the spin
    async function startSpin() {
        const spinButton = document.getElementById('spin-button');
        spinButton.disabled = true;

        try {
            // Reset the animation state before starting a new spin
            resetAnimation();

            // Prepare the dynamic case items (duplicates) for the roller
            generateItemsForRoller();

            // Fetch the winning item from the server
            const response = await fetch('/OpenCase?handler=OpenCase', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.getElementsByName('__RequestVerificationToken')[0].value
                }
            });

            if (!response.ok) {
                throw new Error("Failed to fetch winner");
            }

            const data = await response.json();
            const winningIndex = data.index; // Index of the winning item
            console.log(`Winning index: ${winningIndex}`);

            // Calculate the scroll position
            const totalItems = bufferLoops * caseItems.length + visibleItems;
            const finalPosition = -(itemWidth * (bufferLoops * caseItems.length + winningIndex - Math.floor(visibleItems / 2)));

            // Animate the roller to the winning item
            $('.raffle-roller-container').css({
                transition: "all 8s cubic-bezier(.08,.6,0,1)", // Smooth animation
                "margin-left": `${finalPosition}px` // Scroll to the winning item
            });

            // Wait for the animation to complete before updating the UI
            setTimeout(() => {
                const winningItem = caseItems[winningIndex];
                $('#rolled').html(winningItem.Name); // Display the winner's name
                console.log(`Winning item: ${winningItem.Name}`);

                // Add the winning item to the inventory
                const winElement = `<div class='item' style='background-image: url("${winningItem.ImageUrl}");'></div>`;
                $(winElement).appendTo('.inventory');

                // Re-enable the spin button for a new spin
                spinButton.disabled = false;
            }, 8500); // Wait for animation to complete

        } catch (error) {
            console.error("Error during fetch:", error);
            alert(`Error: ${error.message}`);
            spinButton.disabled = false;
        }
    }

    // Function to generate more items for the roller
    function generateItemsForRoller() {
        // Clear existing items in the roller
        $('.raffle-roller-container').html('');

        // Duplicate the items to create a long spin effect
        for (let i = 0; i < bufferLoops; i++) {
            for(let j=0;j<3;j++)
            {
                  rand=getRandomInt(3);
            item=caseItems[rand];
            const element = `<div class="item class_red_item" style="background-image:url(${item.ImageUrl}); width: ${itemWidth}px;"></div>`;
            $(element).appendTo('.raffle-roller-container');
            }
          
            
        }

     

        // Add a final set of items to complete the visible area
        for (let i = 0; i < visibleItems; i++) {
            const item = caseItems[i % caseItems.length];
            const element = `<div class="item class_red_item" style="background-image:url(${item.ImageUrl}); width: ${itemWidth}px;"></div>`;
            $(element).appendTo('.raffle-roller-container');
        }
        for (let i = 0; i < visibleItems; i++) {
            const item = caseItems[i % caseItems.length];
            const element = `<div class="item class_red_item" style="background-image:url(${item.ImageUrl}); width: ${itemWidth}px;"></div>`;
            $(element).appendTo('.raffle-roller-container');
        }
    }

    // Function to reset the animation
    function resetAnimation() {
        $('.raffle-roller-container').css({
            transition: "none", // Disable transition to reset instantly
            "margin-left": "0px" // Reset position
        });
    }
    function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

</script>

